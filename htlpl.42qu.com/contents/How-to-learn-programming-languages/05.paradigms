（五）编程范式
======

正如树立正确的态度一样，对于问题分析和方法使用的意识也是很重要的，而决定这些问题的，则很大程度上在于对模式和范式的理解。

******

先说范式（Paradigm）。

范式是指编程中普遍的基础风格/形式：如面向对象、过程式、结构化、函数式等范式。范式是确定程序员的编程世界观方法论的关键，它决定了你如何认识程序中的基本单位以及如何去对待他们。命令式编程中，一切都要以语句作为基本元；过程式编程中，以过程/函数为基本元；面向对象中一切都是对象（理想状态下）；函数式则是一切都是表达式；Lisp的基本单位是列表（list）；汇编则是一条条的助记指令。

但范式并没那么简单，就跟辩证唯物主义和科学发展观一样，没那么简单。

******

首先，对范式要有一个概要性的了解。特别是对于多范式语言，多少要能够写出那么一两个对应的示例代码来，而且能对其特点进行分析。

然后就是要用对范式。同语言类似，范式本没有优劣对错，但解决同一个问题，总会有那么一个更优方案。十几行代码就能解决的问题，没必要去话几十分钟画一幅UML图来构建一个完善的对象系统。ED的习惯尽量不要去养成，能用更优的方法，请尝试，否则只可能增加问题的复杂度。

再就是要看清本质：试着去分析一个范式其根本、其实现方式及其目的。很多范式，如事件驱动（data-driven）、泛型（Generic）等范式，本身并非语言特性，而是库或者是语言实现对其进行的扩展。如果你能将一种范式应用/移植到一个语言上，并会比较明显的增进效率，则类似问题的分析和解决方案肯定不在话下了。
