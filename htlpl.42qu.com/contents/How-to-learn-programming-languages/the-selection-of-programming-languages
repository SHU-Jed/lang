（二）编程语言的选择
==========

如何学习编程语言？

这个问题回答起来可不是一般的困难。

******

每个人的情况都是不一样的：理解能力、认识水平或者是其他方面的偏好及差异；这样子就会有无数种情况，根本不可能完全涵盖。但，其中的某些东西是统一的：无论是什么阶段什么基础或者是要准备学习什么语言，其大致的步骤总是有那么些个。

******

那我们试着梳理一下：

### 先决条件

首先，要确定学习哪一个编程语言。

这之中的学问可不浅～有多少人纠结在了这个地方，学了多少内容，而至今还是只理解皮毛（好吧，其实我就是一个活生生的例子）。确定一个准确的目标很重要，当然，确定这个目标的标准之一就是你准备学了它干什么。

好吧，我不去扯那些社区人经常提到的关于入门用什么语言的问题了，国人也历经了很多代的入门程序设计语言了（Basic、Pascal、C），至今身边的同学仍在抱怨，无论学了什么东西都觉得根本都没用，学了也白学。

所以，其实没必要觉得入门难，如果你认为很难，那可能是没有找到你真正适合的语言。而同样的，即便你是一个身经百战的高水平Coder，也不要太小觑了任何一门编程语言：总有些东西令你费解让你觉得不爽的。

### 如何选择

那究竟该怎么选呢？

如果你只是想学习程序设计，来进行研究着玩（好像这样蛋疼的人不多），那选择一些小型的，可研究性强一些的，更能够贴近编程本质和有利于问题抽象的语言：Lisp/scheme是一个非常不错的选择（当然跟着该推荐的是SICP或者HTDP），当然可能利用一些第三方库或者某些实现也同样能够实现一些实用性程序应用，可（至少目前）这方面不是它所擅长，不比较推荐。

而如果想真正写一些实用性的东西，甚至直接可以拿来做大项目或者工程，或许目前应用比较广泛的C系语言（C/C++/Java/C#）是不错的选择，但这并不是仅有的选择：Python是一个很好的语言，拥有众多优良的继承自C或者是自身实现的库，既可用于做大型项目/工程，又能够做一些简单方便的小工具，简单优雅的语法注定了其易于学习和使用的特点；Ruby是另一个推荐的选择，较之于Python在某些方面的特性又更好出许多，直接继承自Lisp和Smalltalk的设计思想和及强大的元编程模式让代码写起来又是另外一种愉悦的享受。

### Hackibility

Hackibility是Geek们的追求，而也有不少编程语言给了Geek们折腾（折腾与学术研究的区别就不用在这里解释了吧）的机会。元编程是一个能吸引他们的好东西，而自由的语法模式和丰富的应用模式也会是不错的噱头。Ruby前面已经提到过了；C++也很适合该需求，继承自C的基础语法和模板元编程的扩展以及C++11标准中又加入的更多值得折腾的特性；CommonJS标准也使得Javascript的hackibility不断提升，Node.js平台的应用也越来越多。

### 原则

总之，大致能够理出以下几点原则：
  * Ed们偏好的语言并不是好的选择，甚至特别不推荐：Java和C#的各种优点都在一步步的被超越，新语言不必说，设计之初的针对性就很强，而那些真正能够持久的语言也更不必说，本身就有其能够持久存在的价值。
  * 社区语言是主要的可选对象。
  * 以打补丁为生的语言不推荐选择：当然，上一条中的Java和C#完全符合这一点，还有PHP等其他的一些语言。如果没有一个基本的设计准则，而以打补丁或者抄袭各种新特性为生，怎么看都会是四不象。
  * 冷门的不一定是差的，而同样，热门的并不一定是好的。
  * ……
